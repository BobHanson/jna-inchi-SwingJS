package inchi;
import java.util.Arrays;
import java.util.List;

import com.sun.jna.Structure;
import com.sun.jna.Structure.ByReference;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class inchi_Input_Polymer extends Structure implements ByReference {
  /** C type : inchi_Input_PolymerUnit** */
  public inchi_Input_PolymerUnit[] units;
  /** Number of polymer units */
  public int n;

  protected List<String> getFieldOrder() {
    return Arrays.asList("units", "n");
  }
  /**
   * @param units C type : inchi_Input_PolymerUnit**<br>
   * @param n Number of polymer units
   */
  public inchi_Input_Polymer(inchi_Input_PolymerUnit units[], int n) {
    super();
    if ((units.length != this.units.length)) 
      throw new IllegalArgumentException("Wrong array size !");
    this.units = units;
    this.n = n;
  }

}
