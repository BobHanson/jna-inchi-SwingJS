package inchi;
import java.util.Arrays;
import java.util.List;

import com.sun.jna.Structure;
import com.sun.jna.Structure.ByReference;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagINCHI_InputINCHI extends Structure implements ByReference {
  /**
   * InChI ASCIIZ string to be converted to a strucure<br>
   * C type : char*
   */
  public String szInChI;
  /**
   * InChI options: space-delimited; each is preceded by<br>
   * C type : char*
   */
  public String szOptions;

  protected List<String> getFieldOrder() {
    return Arrays.asList("szInChI", "szOptions");
  }
  /**
   * @param szInChI InChI ASCIIZ string to be converted to a strucure<br>
   * C type : char*<br>
   * @param szOptions InChI options: space-delimited; each is preceded by<br>
   * C type : char*
   */
  public tagINCHI_InputINCHI(String szInChI, String szOptions) {
    super();
    this.szInChI = szInChI;
    this.szOptions = szOptions;
  }
}
